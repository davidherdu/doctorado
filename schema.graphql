# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Bibliografia {
  id: ID!
  autor: String
  titulo: String
  anio: Int
  fuente: String
  paginas: String
  tipo: String
  notas(where: NotaWhereInput! = {}, orderBy: [NotaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotaWhereUniqueInput): [Nota!]
  notasCount(where: NotaWhereInput! = {}): Int
  createdAt: DateTime
}

input BibliografiaWhereUniqueInput {
  id: ID
}

input BibliografiaWhereInput {
  AND: [BibliografiaWhereInput!]
  OR: [BibliografiaWhereInput!]
  NOT: [BibliografiaWhereInput!]
  id: IDFilter
  autor: StringFilter
  titulo: StringFilter
  anio: IntNullableFilter
  fuente: StringFilter
  paginas: StringFilter
  tipo: StringFilter
  notas: NotaManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input NotaManyRelationFilter {
  every: NotaWhereInput
  some: NotaWhereInput
  none: NotaWhereInput
}

input BibliografiaOrderByInput {
  id: OrderDirection
  autor: OrderDirection
  titulo: OrderDirection
  anio: OrderDirection
  fuente: OrderDirection
  paginas: OrderDirection
  tipo: OrderDirection
  createdAt: OrderDirection
}

input BibliografiaUpdateInput {
  autor: String
  titulo: String
  anio: Int
  fuente: String
  paginas: String
  tipo: String
  notas: NotaRelateToManyForUpdateInput
  createdAt: DateTime
}

input NotaRelateToManyForUpdateInput {
  disconnect: [NotaWhereUniqueInput!]
  set: [NotaWhereUniqueInput!]
  create: [NotaCreateInput!]
  connect: [NotaWhereUniqueInput!]
}

input BibliografiaUpdateArgs {
  where: BibliografiaWhereUniqueInput!
  data: BibliografiaUpdateInput!
}

input BibliografiaCreateInput {
  autor: String
  titulo: String
  anio: Int
  fuente: String
  paginas: String
  tipo: String
  notas: NotaRelateToManyForCreateInput
  createdAt: DateTime
}

input NotaRelateToManyForCreateInput {
  create: [NotaCreateInput!]
  connect: [NotaWhereUniqueInput!]
}

type Nota {
  id: ID!
  pagina: Int
  bibliografia: Bibliografia
  nota: Nota_nota_Document
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
}

type Nota_nota_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NotaWhereUniqueInput {
  id: ID
}

input NotaWhereInput {
  AND: [NotaWhereInput!]
  OR: [NotaWhereInput!]
  NOT: [NotaWhereInput!]
  id: IDFilter
  pagina: IntNullableFilter
  bibliografia: BibliografiaWhereInput
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input NotaOrderByInput {
  id: OrderDirection
  pagina: OrderDirection
  createdAt: OrderDirection
}

input NotaUpdateInput {
  pagina: Int
  bibliografia: BibliografiaRelateToOneForUpdateInput
  nota: JSON
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
}

input BibliografiaRelateToOneForUpdateInput {
  create: BibliografiaCreateInput
  connect: BibliografiaWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input NotaUpdateArgs {
  where: NotaWhereUniqueInput!
  data: NotaUpdateInput!
}

input NotaCreateInput {
  pagina: Int
  bibliografia: BibliografiaRelateToOneForCreateInput
  nota: JSON
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
}

input BibliografiaRelateToOneForCreateInput {
  create: BibliografiaCreateInput
  connect: BibliografiaWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  nombre: String
  notas(where: NotaWhereInput! = {}, orderBy: [NotaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotaWhereUniqueInput): [Nota!]
  notasCount(where: NotaWhereInput! = {}): Int
  createdAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  nombre: StringFilter
  notas: NotaManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  nombre: String
  notas: NotaRelateToManyForUpdateInput
  createdAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  nombre: String
  notas: NotaRelateToManyForCreateInput
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBibliografia(data: BibliografiaCreateInput!): Bibliografia
  createBibliografias(data: [BibliografiaCreateInput!]!): [Bibliografia]
  updateBibliografia(where: BibliografiaWhereUniqueInput!, data: BibliografiaUpdateInput!): Bibliografia
  updateBibliografias(data: [BibliografiaUpdateArgs!]!): [Bibliografia]
  deleteBibliografia(where: BibliografiaWhereUniqueInput!): Bibliografia
  deleteBibliografias(where: [BibliografiaWhereUniqueInput!]!): [Bibliografia]
  createNota(data: NotaCreateInput!): Nota
  createNotas(data: [NotaCreateInput!]!): [Nota]
  updateNota(where: NotaWhereUniqueInput!, data: NotaUpdateInput!): Nota
  updateNotas(data: [NotaUpdateArgs!]!): [Nota]
  deleteNota(where: NotaWhereUniqueInput!): Nota
  deleteNotas(where: [NotaWhereUniqueInput!]!): [Nota]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  bibliografias(where: BibliografiaWhereInput! = {}, orderBy: [BibliografiaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BibliografiaWhereUniqueInput): [Bibliografia!]
  bibliografia(where: BibliografiaWhereUniqueInput!): Bibliografia
  bibliografiasCount(where: BibliografiaWhereInput! = {}): Int
  notas(where: NotaWhereInput! = {}, orderBy: [NotaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotaWhereUniqueInput): [Nota!]
  nota(where: NotaWhereUniqueInput!): Nota
  notasCount(where: NotaWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
